// import escapeHTML from "./escapeHTML";
import $ from "jquery";
import listQueries from './listQueries';
import {getPhases, getSingleTag, getMultiTags} from "./getTags";

// import React, { Component } from 'react';

var retirementExpireDate = new Date((new Date).getFullYear(),(new Date).getMonth()-6,(new Date).getDate(),0,0,0,0);
var introExpireDate = new Date((new Date).getFullYear(),(new Date).getMonth()-1,(new Date).getDate(),0,0,0,0);
var roles = [];
var SPisLoaded = false;


// Loads the required SharePoint libraries in production.
const dataAccess = ( callback )=> {
  $(document).ready(function () {
    if (process.env.NODE_ENV === "development"){
      return
    }
    var scriptbase = "https://collab.pncint.net/sites/SS/PPMPortal/SitePages" + "/_layouts/15/";
    $.getScript(scriptbase + "SP.Runtime.js", function () {
        $.getScript(scriptbase + "SP.js", function () {
            $.getScript(scriptbase + "SP.Taxonomy.js",   getAllRoles );
        });
      });
  });
}


// This function queries a SP list with (currentPillar,currentSLC,currentPhase) and returns an enumerator that may be rendered with a callback function.
////////////////////////////////////////////////////////////////

// Check to see if SP is loaded before getting data
const getData = (listID, currentPillar, currentSLC,currentPhase, callback) => {
  if(SPisLoaded){
    getDataForReal(listID, currentPillar, currentSLC, currentPhase, callback);
  }
  else {
    setTimeout(function () {
      getData(listID, currentPillar,currentSLC,currentPhase, callback);
    }, 100);
  }
}


// Get the data
const getDataForReal = ( listID, currentPillar,currentSLC,currentPhase, callback ) => {


  var listTitle = listQueries[listID].listTitle;
  console.log('Retrieving', listTitle,"("+currentPillar+", "+currentSLC+", "+currentPhase+") ...");
  //Get the current context
  var context = new SP.ClientContext();

  //Get references to Lists and Libraries
  var docList = context.get_web().get_lists().getByTitle( listTitle );

  //Create a new CAML query object
  var docListCAML = new SP.CamlQuery();

  //If there is a query string defined, then pass it to the CAML object. No string means return everything.
  var docListQueryString = listQueries[listID].queryString(currentPillar,currentSLC,currentPhase);

  if ( docListQueryString !== undefined) {
    docListCAML.set_viewXml( docListQueryString );
  }

  //Apply CAML query to each list
  
  var docListResults = docList.getItems(docListCAML);

  //Load all result objects to the context at one time. We do this in order to only make ONE call to SharePoint for the data
  context.load(docListResults);

  // Prepare Doc Sort data if item is from Content Library
  if (listID === "doc"){
    var docSortList = context.get_web().get_lists().getByTitle( listQueries.docSort.listTitle );
    var docSortListCAML = new SP.CamlQuery();
    var docSortListQueryString = listQueries.docSort.queryString(currentPillar,currentSLC,currentPhase);
    if ( docSortListQueryString !== undefined) {
      docSortListCAML.set_viewXml( docSortListQueryString );
    }
    var docSortListResults = docSortList.getItems(docSortListCAML);
    context.load(docSortListResults);
  }

  // Go fetch the data!
  context.executeQueryAsync( () => {
    const docEnum = docListResults.getEnumerator();
    if (listID === "doc") {
      const docSortEnum = docSortListResults.getEnumerator();
      callback(docEnum, docSortEnum, currentPhase)
    }
    // optional callback function...
    else if (callback && typeof callback === 'function'){
        callback(docEnum);
    }
  });

}
// end getData()


// Check to see if SP is loaded before getting data
const getList = (listID, callback) => {
  if(SPisLoaded){
    getListForReal(listID, callback);
  }
  else {
    setTimeout(function () {
      getList(listID, callback);
    }, 100);
  }
}


// Get the List
const getListForReal = ( listTitle, callback ) => {
  // const listTitle = listQueries[listID].listTitle;
  console.log('Retrieving', listTitle);
  //Get the current context
  const context = new SP.ClientContext();

  //Get references to Lists and Libraries
  const docList = context.get_web().get_lists().getByTitle( listTitle );

  //Create a new CAML query object
  const docListCAML = new SP.CamlQuery();

  //Apply CAML query to each list
  const docListResults = docList.getItems(docListCAML);

  //Call SharePoint for the data
  context.load(docListResults);

  // Go fetch the data!
  context.executeQueryAsync( () => {
    let listEnum = docListResults.getEnumerator();
    renderList(listTitle, listEnum, callback);
  });
} // end getList

function renderList( listTitle, listEnum, callback ){
  let listIndex = [];

  // basic list
  if (listTitle === "FAQ" ){
    while (listEnum.moveNext()) {
      let currentRecord = listEnum.get_current();
      let item = {
          title: currentRecord.get_item("Title"),
          contentCategory: this.props.listID,
          overlayText: currentRecord.get_item("Content"),
      };
      listIndex.push(item);
    }
  }

  
  if(listTitle === "ContentLibrary"){
    while (listEnum.moveNext()) {
      let currentRecord = docEnum.get_current();
      //Get fields
      let item = {
          id: currentRecord.get_item("ID")
          , title: currentRecord.get_item("Title")
          , contentCategory: getSingleTag(currentRecord.get_item("ContentCategory"))
          , activityCategory: getSingleTag(currentRecord.get_item("ActivityCategory"))
          , pillars: getMultiTags(currentRecord.get_item("Pillar"), "pillar")
          , methodologies: getMultiTags(currentRecord.get_item("Methodology"), "method")
          , phasesArray: getMultiTags(currentRecord.get_item("Phase"), "phase")
          , responsible: getMultiTags(currentRecord.get_item("Responsible"), "role")
          , accountable: getMultiTags(currentRecord.get_item("Accountable"), "role")
          , requiredApprover: getMultiTags(currentRecord.get_item("RequiredApprover"), "role").filter(role=>role!=="NA")
          , overlayText: currentRecord.get_item("OverlayText")
          , path: currentRecord.get_item("FileRef")
          , videoURL: (currentRecord.get_item("VideoURL") && currentRecord.get_item("VideoURL").get_url())
          , additionalResourceURL: (currentRecord.get_item("AdditionalResourceURL") && currentRecord.get_item("AdditionalResourceURL").get_url())
          , partnerInteractionURL: ( currentRecord.get_item("PartnerInteractionURL") && currentRecord.get_item("PartnerInteractionURL").get_url())
          , hideDownloadButton: currentRecord.get_item("HideDownloadButton")
      }
      //get all phases from the array as a comma-delimited string
      item.phases = getPhases(item);
      //fill Activity Docs Collection
      listIndex.push(item);
    }
  }

  if (listTitle === "Announcements" ){
    while (listEnum.moveNext()) {
      let currentRecord = listEnum.get_current();
      // console.log(this.props.listID, 'Current Record', currentRecord);

      let item = {
          title: currentRecord.get_item("Title"),
          created: currentRecord.get_item("Created"),
          contentCategory: this.props.listID,
          overlayText: currentRecord.get_item("Body")
      };
      listIndex.push(item);
    }
  }

  if (listTitle === "Upcoming Events" ){
    while (listEnum.moveNext()) {
      let currentRecord = listEnum.get_current();

      let item = {
        title: currentRecord.get_item("Title")
        , contentCategory: this.props.listID
        , overlayText: currentRecord.get_item("EventDescription")
        , eventDate: currentRecord.get_item("EventDate")
      };
      listIndex.push(item);
    }
  }
 
  if (listTitle === "VideoLibrary" ){
    while (listEnum.moveNext()) {
      let currentRecord = listEnum.get_current();
      // console.log(this.props.listID, 'Current Record', currentRecord.get_fieldValues() );
          
      let item = {
          title: currentRecord.get_item("Title"),
          contentCategory: this.props.listID,
          overlayText: currentRecord.get_item("Content"),
          callout: currentRecord.get_item("Callout"),
          status: currentRecord.get_item("Status")
      };
      listIndex.push(item); 
    }
  }
  
  if (listTitle === "FeaturedVideoLibrary" ){
    while (listEnum.moveNext()) {
      let currentRecord = listEnum.get_current();
      // console.log(this.props.listID, 'Current Record', currentRecord);
      let item = {
        title: currentRecord.get_item("Title")
        , path: currentRecord.get_item("FileRef") + ".mp4"
        , thumb: currentRecord.get_item("AlternateThumbnailUrl")
        , videoId: currentRecord.get_item('UniqueId')
      };
      listIndex.push(item); 
    //   data = 'https://collab.pncint.net/sites/SS/PPMPortal/_layouts/15/videoembedplayer.aspx'
    //             + '?site=be4bd75cc06d455a8a2e805c8f5a2313&'
    //             + 'web=16ba62a2d41241c9a49ae512f3c5df3c&'
    //             + 'folder=' + item.videoId + '&'
    //             + 'img=' + item.thumb.get_url() + '&'
    //             + 'title=1'
    // }
    }
  }
  
  if (listTitle === "Did You Know" ){
    while (listEnum.moveNext()) {
      let currentRecord = listEnum.get_current();
      // console.log(this.props.listID, 'Current Record', currentRecord.get_fieldValues() );

      let item = {
          title: currentRecord.get_item("Title"),
          contentCategory: this.props.listID,
          overlayText: currentRecord.get_item("Content"),
          callout: currentRecord.get_item("Callout"),
          status: currentRecord.get_item("Status")
      };
      listIndex.push(item); 
    }
  }
  


  // optional callback function...
  if (callback && typeof callback === 'function'){
    callback(listIndex);    
  }
} // end renderList


// getAllRoles function is the first function executed when a portal session starts or a user switches between Methodologies/Pillars.
// The function runs a series of queries to associate Responsible and Accountable acronyms to their respective expanded labels.
// It enables the hover functionality that allows a user to mouseover a Responsible/Accountable record and see the long description.
// parseRoleDescriptors() is open to other modules so it can retrieve info from roles[]
function getAllRoles(){
    var context = SP.ClientContext.get_current();
    var session = SP.Taxonomy.TaxonomySession.getTaxonomySession(context);
    var termStore = session.getDefaultSiteCollectionTermStore();
    var parentTermId = '3bdaa19f-cf7a-4545-8a27-8c84bf572b23'; //parent Term Id
    var parentTerm = termStore.getTerm(parentTermId);
    var terms = parentTerm.get_terms();  //load child Terms

    context.load(terms);
    context.executeQueryAsync(
    function(){
       //print child Terms
       for(var i = 0; i < terms.get_count();i++){
           var term = terms.getItemAtIndex(i);
           //console.log(term.get_name());
           getTermExpandedLabel(term,1033,pushItem,logError);
       }

       // SP is loaded.  safe to get data
       SPisLoaded = true;
    },
    function(sender,args){
      console.log(args.get_message());
    });

}


function getTermExpandedLabel(term,lcid,success,failure)
{
    var context = SP.ClientContext.get_current();
    var taxSession = SP.Taxonomy.TaxonomySession.getTaxonomySession(context);
    var termExpandedLabel = taxSession.getTerm(term.get_id()).getAllLabels(lcid);
    context.load(termExpandedLabel);
    context.executeQueryAsync(function() {
           success(term,termExpandedLabel);
        },
        failure);
}

function pushItem(term,termExpandedLabel)
{
    var item = {
          termLabel: term.get_name()
        , termSynonym: (function () { try { termExpandedLabel.getItemAtIndex(1).get_value(); return termExpandedLabel.getItemAtIndex(1).get_value(); } catch(error) { return "N/A" }})()
    }

    roles.push(item);
}

function parseRoleDescriptors(role) {
    var roleSynonym = roles.filter(function(obj){
      return (obj.termLabel === role)
  });
  if (roleSynonym[0]){
    return roleSynonym[0].termSynonym
  }
}


function logError(sender,args){
    console.log(args.get_message());
}





export {dataAccess, getData, getAllRoles, getList, parseRoleDescriptors };
